{"version":3,"sources":["../src/index.ts","../src/data-provider/index.ts","../src/utils/index.ts"],"sourcesContent":["import dataProvider from \"./data-provider\";\nexport default dataProvider;\n\nexport * from \"./data-provider\";\n\n\nexport {\n    GraphQLClient,\n    batchRequests,\n    gql,\n    rawRequest,\n    request,\n    resolveRequestDocument,\n} from \"graphql-request\";\n\nexport type {\n    BatchRequestDocument,\n    BatchRequestsExtendedOptions,\n    BatchRequestsOptions,\n    ClientError,\n    RawRequestExtendedOptions,\n    RawRequestOptions,\n    RequestDocument,\n    RequestExtendedOptions,\n    RequestOptions,\n    Variables,\n} from \"graphql-request\";\n\nexport * as qqlQueryBuilder from \"gql-query-builder\";\n\n\nexport * from \"./utils\";\n","import { BaseRecord } from '@refinedev/core';\nimport { DataProvider } from \"@refinedev/core\";\nimport { GraphQLClient } from \"graphql-request\";\nimport * as gql from \"gql-query-builder\";\nimport pluralize from \"pluralize\";\nimport camelCase from \"camelcase\";\nimport { createNestedInput, generateSort, generateWherePropFromFilters, excludePropsFomObj, includeJustPropsFromObj, updateNestedInput } from '../utils';\n\n\n\n const dataProvider = (client: GraphQLClient): Required<DataProvider> => {\n    return {\n        getList: async (props) => {\n            const { resource, pagination, sorters, filters, meta } = props\n            const singularResource = pluralize.singular(resource);\n            const {\n                current, pageSize, mode = \"server\",\n            } = pagination ?? {};\n\n            const orderBy = generateSort(sorters);\n\n            const where = generateWherePropFromFilters(filters, meta?.nestedFieldsNames, meta?.nestedListFieldsNames);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            console.log('props ?????;;;;;', props)\n            const pluralRessource = pluralize(pascalResource)\n            const operation = `all${pluralRessource}`;\n            const operation2 = `_all${pluralRessource}Meta`;\n            const { query, variables } = gql.query([\n                {\n                    operation,\n                    variables: {\n                        where: { value: where, type: `${pascalResource}WhereInput` },\n                        orderBy: { value: orderBy, type: `[${pascalResource}OrderByWithRelationInput!]` },\n                        page: { value: Number(current || 1), required: false, type: 'Float' },\n                        perPage: { value: Number(pageSize || 10), required: false, type: 'Float' }\n                    },\n                    fields: meta?.fields || [],\n                },\n                {\n                    operation: operation2,\n                    variables: {\n                        where: { value: where, type: `${pascalResource}WhereInput` }\n                    },\n                    fields: ['count'],\n                }\n            ]);\n\n            const response = await client.request<BaseRecord>(query, variables);\n            console.log('response[operation2].count', response[operation2].count)\n            return {\n                data: response[operation],\n                total: Number(response[operation2].count),\n            };\n        },\n\n        getMany: async ({ resource, ids, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            // const pluralRessource = pluralize(pascalResource)\n            const operation = `all${pascalResource}`;\n\n\n            const { query, variables } = gql.query({\n                operation,\n                variables: {\n                    where: {\n                        value: { id_in: ids },\n                    },\n                },\n                fields: meta?.fields,\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        create: async ({ resource, variables, meta }) => {\n            \n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n\n            const camelCreateName = camelCase(`create${pascalResource}`);\n\n            const operation = meta?.operation ?? camelCreateName;\n            // const { nestedFields } = meta as any\n            const nestedFieldsNames = meta?.nestedFieldsNames || [];\n            const nestedVars = includeJustPropsFromObj(variables, nestedFieldsNames);\n            const nestedInput = createNestedInput(nestedVars);\n            const fieldsWithoutNestedInput = excludePropsFomObj(variables, nestedFieldsNames);\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation,\n                variables: {\n                    createInput: {\n                        value: {\n                            ...fieldsWithoutNestedInput,\n                            ...nestedInput\n                        },\n                        type: `${pascalResource}CreateInput!`,\n                    },\n                },\n                fields: meta?.fields,\n            });\n            const response = await client.request<BaseRecord>(\n                query,\n                gqlVariables\n            );\n\n            return {\n                data: response[operation][singularResource],\n            };\n        },\n\n        createMany: async ({ resource, variables, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const camelCreateName = camelCase(`create${singularResource}`);\n\n            const operation = meta?.operation ?? camelCreateName;\n\n            const response = await Promise.all(\n                variables.map(async (param) => {\n                    const { query, variables: gqlVariables } = gql.mutation({\n                        operation,\n                        variables: {\n                            input: {\n                                value: { data: param },\n                                type: `${camelCreateName}Input`,\n                            },\n                        },\n                        fields: meta?.fields ?? [\n                            {\n                                operation: singularResource,\n                                fields: [\"id\"],\n                                variables: {},\n                            },\n                        ],\n                    });\n                    const result = await client.request<BaseRecord>(\n                        query,\n                        gqlVariables\n                    );\n\n                    return result[operation][singularResource];\n                })\n            );\n            return {\n                data: response,\n            };\n        },\n\n        update: async ({ resource, id, variables, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            const pascalUpdateName = camelCase(`update${pascalResource}`);\n\n\n            const operation = meta?.operation ?? pascalUpdateName;\n\n            const initialVariables = {};\n            const nestedFieldsNames = meta?.nestedFieldsNames || [];\n            const nestedVars = includeJustPropsFromObj(variables, nestedFieldsNames);\n            const nestedInput = updateNestedInput(nestedVars, initialVariables);\n            const fieldsWithoutNestedInput = excludePropsFomObj(variables, nestedFieldsNames);\n\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation,\n                variables: {\n                    id: {\n                        value: Number(id),\n                        type: 'Int!'\n                    },\n                    updateInput: {\n                        value: {\n                            ...fieldsWithoutNestedInput,\n                            ...nestedInput\n                        },\n                        type: `${pascalResource}UpdateInput!`,\n                    },\n                },\n                fields: ['id'],\n            });\n            const response = await client.request<BaseRecord>(\n                query,\n                gqlVariables\n            );\n\n            return {\n                data: response[operation][singularResource],\n            };\n        },\n\n        updateMany: async ({ resource, ids, variables, meta }) => {\n            const singularResource = pluralize.singular(resource);\n\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            const pascalUpdateName = camelCase(`update${pascalResource}`);\n\n\n            const operation = meta?.operation ?? pascalUpdateName;\n\n            const response = await Promise.all(\n                ids.map(async (id) => {\n                    const { query, variables: gqlVariables } = gql.mutation({\n                        operation,\n                        variables: {\n                            id: {\n                                value: Number(id),\n                                type: 'Int!'\n                            },\n                            updateInput: {\n                                value: {\n                                    ...variables,\n\n                                },\n                                type: `${pascalResource}UpdateInput!`,\n                            },\n                        },\n                        fields: ['id'],\n\n                    });\n                    const result = await client.request<BaseRecord>(\n                        query,\n                        gqlVariables\n                    );\n\n                    return result[operation][singularResource];\n                })\n            );\n            return {\n                data: response,\n            };\n        },\n\n        getOne: async ({ resource, id, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n\n            const operation = pascalResource;\n\n            const { query, variables } = gql.query({\n                operation,\n                variables: {\n                    id: { value: Number(id), type: \"Int!\" },\n                },\n                fields: meta?.fields || [\"id\"],\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        deleteOne: async ({ resource, id, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            const camelDeleteName = camelCase(`delete${pascalResource}`);\n\n            const operation = meta?.operation ?? camelDeleteName;\n\n            const { query, variables } = gql.mutation({\n                operation,\n                variables: {\n                    id: { value: Number(id), type: \"Int!\" },\n                },\n                fields: ['id'],\n            });\n\n            const response = await client.request<BaseRecord>(query, variables);\n\n            return {\n                data: response[operation][singularResource],\n            };\n        },\n\n        deleteMany: async ({ resource, ids, meta }) => {\n            const singularResource = pluralize.singular(resource);\n            const pascalResource = camelCase(singularResource, { pascalCase: true });\n            const camelDeleteName = camelCase(`delete${pascalResource}`);\n\n            const operation = meta?.operation ?? camelDeleteName;\n\n            const response = await Promise.all(\n                ids.map(async (id) => {\n                    const { query, variables: gqlVariables } = gql.mutation({\n                        operation,\n                        variables: {\n                            id: { value: Number(id), type: \"Int!\" },\n                        },\n                        fields: ['id'],\n                    });\n                    const result = await client.request<BaseRecord>(\n                        query,\n                        gqlVariables\n                    );\n\n                    return result[operation][singularResource];\n                })\n            );\n            return {\n                data: response,\n            };\n        },\n\n        getApiUrl: () => {\n            throw Error(\"Not implemented on refine-graphql data provider.\");\n        },\n\n        custom: async ({ url, method, headers, meta }) => {\n            let gqlClient = client;\n\n            if (url) {\n                gqlClient = new GraphQLClient(url, { headers });\n            }\n\n            if (meta) {\n                if (meta.operation) {\n                    if (method === \"get\") {\n                        const { query, variables } = gql.query({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        const response = await gqlClient.request<BaseRecord>(\n                            query,\n                            variables\n                        );\n\n                        return {\n                            data: response[meta.operation],\n                        };\n                    } else {\n                        const { query, variables } = gql.mutation({\n                            operation: meta.operation,\n                            fields: meta.fields,\n                            variables: meta.variables,\n                        });\n\n                        const response = await gqlClient.request<BaseRecord>(\n                            query,\n                            variables\n                        );\n\n                        return {\n                            data: response[meta.operation],\n                        };\n                    }\n                } else {\n                    throw Error(\"GraphQL operation name required.\");\n                }\n            } else {\n                throw Error(\n                    \"GraphQL need to operation, fields and variables values in meta object.\"\n                );\n            }\n        },\n    };\n};\n\n\n\nexport default dataProvider","\nconst itemWithSameIdExists = (itemsList: any[], item: any) => {\n    return itemsList.map((item: any) => item?.id).filter(i => !!i)\n        .indexOf(item?.id) !== -1\n}\n\nexport const createDeleteUpdateFields = (currentData: any, initialData: any) => {\n    const nestedResourcestoBeCreated = currentData.filter((item: any) => !item?.id);\n    const nestedResourcesToBeUpdated = currentData.filter((item: any) => !!item?.id);\n    const nestedResourcestoBeDeleted = initialData.filter((item: any) => !itemWithSameIdExists(currentData, item))\n    return {\n        create: nestedResourcestoBeCreated,\n        update: nestedResourcesToBeUpdated,\n        delete: nestedResourcestoBeDeleted,\n    }\n\n}\n\nexport const updateNestedInput = (nestedFields: any, initialVariables: any) => {\n\n    return Object.entries(nestedFields).reduce((accum, [fieldName, data]) => {\n        return {\n            ...accum,\n            [fieldName]: {\n                ...createDeleteUpdateFields(data, initialVariables[fieldName])\n            }\n        };\n    }, {});\n};\nexport const includeJustPropsFromObj = (obj: any, propList: any) => {\n    return Object.entries(obj).filter(([fieldName, _]) => {\n        return propList.indexOf(fieldName) !== -1\n    })\n        .reduce((accum, [fieldName, data]) => {\n            return {\n                ...accum,\n                [fieldName]: data\n            }\n        }, {})\n}\nexport const excludePropsFomObj = (obj: any, propList: any) => {\n    return Object.entries(obj).filter(([fieldName, _]) => {\n        return propList.indexOf(fieldName) === -1\n    })\n        .reduce((accum, [fieldName, data]) => {\n            return {\n                ...accum,\n                [fieldName]: data\n            }\n        }, {})\n}\nexport const createNestedInput = (nestedFields: any) => {\n\n    return Object.entries(nestedFields).reduce((accum, [fieldName, data]) => {\n        return {\n            ...accum,\n            [fieldName]: {\n                create: data\n            }\n        }\n    }, {})\n}\n\nexport const generateSort = (sorters: any = []) => {\n\n    const sortProp = sorters.map((field: any) => {\n        if (!!field?.field && field?.order) {\n            return {\n                [field?.field]: field?.order\n            }\n        }\n        return null\n    }).filter((r: any) => !!r)\n    return sortProp\n}\n\nexport const generateWherePropFromFilters = (filters: any = [],nestedFieldsNames:any[] = [],nestedListFieldsNames:any[] = []) => {\n    console.log('props from filters....',filters)\n    const whereProp = filters.reduce((accum: any, filter: any) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { field, operator, value } = filter;\n            console.log(operator,value,'nestedFieldsNames',nestedFieldsNames)\n            if (operator === \"in\" && nestedListFieldsNames.indexOf(field) !==-1) {\n               \n            \n                return {\n                    ...accum,\n                    [field]: { some:{id:{in:value.map((val:string) =>Number(val))}} }\n                } \n            }\n             // todo cehck for non M2m then no some just in\n            if (operator === \"in\" && nestedFieldsNames.indexOf(field) !==-1) {\n               \n            \n                return {\n                    ...accum,\n                    [field]: { is:{id:{in:value.map((val:string) =>Number(val))}} }\n                } \n            }\n            if (operator === \"eq\" && nestedListFieldsNames.indexOf(field) !==-1) {\n           \n                return {\n                    ...accum,\n                    [field]:{some:{id:{equals:Number(value)}}}\n                }\n            }\n            if (operator === \"eq\" && nestedFieldsNames.indexOf(field) !==-1) {\n           \n                return {\n                    ...accum,\n                    [field]:{is:{id:{equals:Number(value)}}}\n                }\n            }\n            \n            if (operator === \"eq\" && nestedFieldsNames.indexOf(field) ===-1 && nestedListFieldsNames.indexOf(field) !==-1) {\n                return {\n                    ...accum,\n                    [field]: { equals: value }\n                }\n            }\n            if ([\"lt\", \"gt\",\"lte\", \"gte\"].indexOf(operator) !== -1) {\n                return {\n                    ...accum,\n                    [field]: { [operator]: value }\n                }\n            }\n\n          \n        }\n\n        return {\n            ...accum\n        }\n    }, { })\n\n    return whereProp\n}"],"mappings":"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","names":["src_exports","__export","createDeleteUpdateFields","createNestedInput","src_default","excludePropsFomObj","generateSort","generateWherePropFromFilters","includeJustPropsFromObj","qqlQueryBuilder","updateNestedInput","__toCommonJS","import_graphql_request","gql","import_pluralize","import_camelcase","itemWithSameIdExists","itemsList","item","i","createDeleteUpdateFields","currentData","initialData","nestedResourcestoBeCreated","nestedResourcesToBeUpdated","nestedResourcestoBeDeleted","updateNestedInput","nestedFields","initialVariables","accum","fieldName","data","includeJustPropsFromObj","obj","propList","_","excludePropsFomObj","createNestedInput","generateSort","sorters","field","r","generateWherePropFromFilters","filters","nestedFieldsNames","nestedListFieldsNames","filter","operator","value","val","dataProvider","client","props","resource","pagination","sorters","filters","meta","singularResource","pluralize","current","pageSize","mode","orderBy","generateSort","where","generateWherePropFromFilters","pascalResource","camelCase","pluralRessource","operation","operation2","query","variables","response","ids","camelCreateName","nestedFieldsNames","nestedVars","includeJustPropsFromObj","nestedInput","createNestedInput","fieldsWithoutNestedInput","excludePropsFomObj","gqlVariables","param","id","pascalUpdateName","initialVariables","updateNestedInput","camelDeleteName","url","method","headers","gqlClient","data_provider_default","import_graphql_request","qqlQueryBuilder","src_default","data_provider_default"]}