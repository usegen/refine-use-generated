(()=>{var G=Object.create;var H=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var K=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var h=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var Y=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of J(t))!X.call(e,n)&&n!==r&&H(e,n,{get:()=>t[n],enumerable:!(s=k(t,n))||s.enumerable});return e};var x=(e,t,r)=>(r=e!=null?G(K(e)):{},Y(t||!e||!e.__esModule?H(r,"default",{value:e,enumerable:!0}):r,e));var M=x(h("./createRequestBody.js"),1),$=h("./defaultJsonSerializer.js"),I=h("./helpers.js"),w=h("./parseArgs.js"),N=h("./resolveRequestDocument.js"),U=h("./types.js"),C=x(h("cross-fetch"),1),ae=h("./graphql-ws.js"),W=h("./resolveRequestDocument.js");var m=e=>{let t={};return e&&(typeof Headers<"u"&&e instanceof Headers||C&&C.Headers&&e instanceof C.Headers?t=(0,I.HeadersInstanceToPlainObject)(e):Array.isArray(e)?e.forEach(([r,s])=>{r&&s!==void 0&&(t[r]=s)}):t=e),t},S=e=>e.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),Z=e=>{if(!Array.isArray(e.query)){let s=e,n=[`query=${encodeURIComponent(S(s.query))}`];return e.variables&&n.push(`variables=${encodeURIComponent(s.jsonSerializer.stringify(s.variables))}`),s.operationName&&n.push(`operationName=${encodeURIComponent(s.operationName)}`),n.join("&")}if(typeof e.variables<"u"&&!Array.isArray(e.variables))throw new Error("Cannot create query with given variable type, array expected");let t=e,r=e.query.reduce((s,n,i)=>(s.push({query:S(n),variables:t.variables?t.jsonSerializer.stringify(t.variables[i]):void 0}),s),[]);return`query=${encodeURIComponent(t.jsonSerializer.stringify(r))}`},D=e=>async t=>{let{url:r,query:s,variables:n,operationName:i,fetch:o,fetchOptions:a,middleware:u}=t,c={...t.headers},l="",d;e==="POST"?(d=(0,M.default)(s,n,i,a.jsonSerializer),typeof d=="string"&&(c["Content-Type"]="application/json")):l=Z({query:s,variables:n,operationName:i,jsonSerializer:a.jsonSerializer??$.defaultJsonSerializer});let p={method:e,headers:c,body:d,...a},y=r,b=p;if(u){let f=await Promise.resolve(u({...p,url:r,operationName:i,variables:n})),{url:R,...P}=f;y=R,b=P}return l&&(y=`${y}?${l}`),await o(y,b)},O=class{constructor(t,r={}){this.url=t,this.requestConfig=r,this.rawRequest=async(...s)=>{let[n,i,o]=s,a=(0,w.parseRawRequestArgs)(n,i,o),{headers:u,fetch:c=C.default,method:l="POST",requestMiddleware:d,responseMiddleware:p,...y}=this.requestConfig,{url:b}=this;a.signal!==void 0&&(y.signal=a.signal);let{operationName:f}=(0,N.resolveRequestDocument)(a.query);return B({url:b,query:a.query,variables:a.variables,headers:{...m(A(u)),...m(a.requestHeaders)},operationName:f,fetch:c,method:l,fetchOptions:y,middleware:d}).then(R=>(p&&p(R),R)).catch(R=>{throw p&&p(R),R})}}async request(t,...r){let[s,n]=r,i=(0,w.parseRequestArgs)(t,s,n),{headers:o,fetch:a=C.default,method:u="POST",requestMiddleware:c,responseMiddleware:l,...d}=this.requestConfig,{url:p}=this;i.signal!==void 0&&(d.signal=i.signal);let{query:y,operationName:b}=(0,N.resolveRequestDocument)(i.document);return B({url:p,query:y,variables:i.variables,headers:{...m(A(o)),...m(i.requestHeaders)},operationName:b,fetch:a,method:u,fetchOptions:d,middleware:c}).then(f=>(l&&l(f),f.data)).catch(f=>{throw l&&l(f),f})}batchRequests(t,r){let s=(0,w.parseBatchRequestArgs)(t,r),{headers:n,...i}=this.requestConfig;s.signal!==void 0&&(i.signal=s.signal);let o=s.documents.map(({document:u})=>(0,N.resolveRequestDocument)(u).query),a=s.documents.map(({variables:u})=>u);return B({url:this.url,query:o,variables:a,headers:{...m(A(n)),...m(s.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??C.default,method:this.requestConfig.method||"POST",fetchOptions:i,middleware:this.requestConfig.requestMiddleware}).then(u=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u.data)).catch(u=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u})}setHeaders(t){return this.requestConfig.headers=t,this}setHeader(t,r){let{headers:s}=this.requestConfig;return s?s[t]=r:this.requestConfig.headers={[t]:r},this}setEndpoint(t){return this.url=t,this}},B=async e=>{let{query:t,variables:r,fetchOptions:s}=e,n=D((0,I.uppercase)(e.method??"post")),i=Array.isArray(e.query),o=await n(e),a=await ne(o,s.jsonSerializer??$.defaultJsonSerializer),u=Array.isArray(a)?!a.some(({data:l})=>!l):!!a.data,c=Array.isArray(a)||!a.errors||Array.isArray(a.errors)&&!a.errors.length||s.errorPolicy==="all"||s.errorPolicy==="ignore";if(o.ok&&c&&u){let{errors:l,...d}=(Array.isArray(a),a),p=s.errorPolicy==="ignore"?d:a;return{...i?{data:p}:p,headers:o.headers,status:o.status}}else{let l=typeof a=="string"?{error:a}:a;throw new U.ClientError({...l,status:o.status,headers:o.headers},{query:t,variables:r})}},ee=async(...e)=>{let[t,r,...s]=e,n=(0,w.parseRawRequestExtendedArgs)(t,r,...s);return new O(n.url).rawRequest({...n})};async function re(e,t,...r){let s=(0,w.parseRequestExtendedArgs)(e,t,...r);return new O(s.url).request({...s})}var se=async(...e)=>{let t=te(e);return new O(t.url).batchRequests(t)},te=e=>e.length===1?e[0]:{url:e[0],documents:e[1],requestHeaders:e[2],signal:void 0};var ne=async(e,t)=>{let r;return e.headers.forEach((s,n)=>{n.toLowerCase()==="content-type"&&(r=s)}),r&&(r.toLowerCase().startsWith("application/json")||r.toLowerCase().startsWith("application/graphql+json")||r.toLowerCase().startsWith("application/graphql-response+json"))?t.parse(await e.text()):e.text()},A=e=>typeof e=="function"?e():e,oe=(e,...t)=>e.reduce((r,s,n)=>`${r}${s}${n in t?t[n]:""}`,"");var g=x(h("gql-query-builder")),v=x(h("pluralize")),q=x(h("camelcase"));var ie=(e,t)=>e.map(r=>r==null?void 0:r.id).filter(r=>!!r).indexOf(t==null?void 0:t.id)!==-1,ue=e=>{let{id:t,...r}=e;return{data:{...r},where:{id:Number(t)}}},le=(e,t)=>{if(console.log("currentData...",e),console.log("initialData...",t),Array.isArray(e)){let r=e.filter(i=>!(i!=null&&i.id)),s=e.filter(i=>!!(i!=null&&i.id)).map(ue),n=(t||[]).filter(i=>!ie(e,i));return{create:r,update:s,delete:n}}return console.log("currentData .....",e),Object.keys(e).length===1&&(e!=null&&e.id)?{connect:{id:Number(e==null?void 0:e.id)}}:{}},z=(e,t={})=>Object.entries(e).reduce((r,[s,n])=>({...r,[s]:{...le(n,null)}}),{}),j=(e,t)=>Object.entries(e).filter(([r,s])=>t.indexOf(r)!==-1).reduce((r,[s,n])=>({...r,[s]:n}),{}),E=(e,t)=>Object.entries(e).filter(([r,s])=>t.indexOf(r)===-1).reduce((r,[s,n])=>({...r,[s]:n}),{}),V=e=>Object.entries(e).reduce((t,[r,s])=>({...t,[r]:{create:s}}),{}),L=(e=[])=>e.map(r=>r!=null&&r.field&&(r!=null&&r.order)?{[r==null?void 0:r.field]:r==null?void 0:r.order}:null).filter(r=>!!r),Q=(e=[],t=[],r=[])=>(console.log("props from filters....",e),e.reduce((n,i)=>{if(i.operator!=="or"&&i.operator!=="and"&&"field"in i){let{field:o,operator:a,value:u}=i;if(console.log(a,u,"nestedFieldsNames",t),a==="in"&&r.indexOf(o)!==-1)return{...n,[o]:{some:{id:{in:u.map(c=>Number(c))}}}};if(a==="in"&&t.indexOf(o)!==-1)return{...n,[o]:{is:{id:{in:u.map(c=>Number(c))}}}};if(a==="eq"&&r.indexOf(o)!==-1)return{...n,[o]:{some:{id:{equals:Number(u)}}}};if(a==="eq"&&t.indexOf(o)!==-1)return{...n,[o]:{is:{id:{equals:Number(u)}}}};if(a==="eq"&&t.indexOf(o)===-1&&r.indexOf(o)!==-1)return{...n,[o]:{equals:u}};if(["lt","gt","lte","gte"].indexOf(a)!==-1)return{...n,[o]:{[a]:u}}}return{...n}},{}));var ce=e=>({getList:async t=>{let{resource:r,pagination:s,sorters:n,filters:i,meta:o}=t,a=v.default.singular(r),{current:u,pageSize:c,mode:l="server"}=s??{},d=L(n),p=(o==null?void 0:o.where)||Q(i,o==null?void 0:o.nestedFieldsNames,o==null?void 0:o.nestedListFieldsNames),y=(0,q.default)(a,{pascalCase:!0}),b=(0,v.default)(y),f=`all${b}`,R=`_all${b}Meta`,{query:P,variables:_}=g.query([{operation:f,variables:{where:{value:p,type:`${y}WhereInput`},orderBy:{value:d,type:`[${y}OrderByWithRelationInput!]`},page:{value:Number(u||1),required:!1,type:"Float"},perPage:{value:Number(c||10),required:!1,type:"Float"}},fields:(o==null?void 0:o.fields)||[]},{operation:R,variables:{where:{value:p,type:`${y}WhereInput`}},fields:["count"]}]),F=await e.request(P,_);return{data:F[f],total:Number(F[R].count)}},getMany:async({resource:t,ids:r,meta:s})=>{let n=v.default.singular(t),o=`all${(0,q.default)(n,{pascalCase:!0})}`,{query:a,variables:u}=g.query({operation:o,variables:{where:{value:{id_in:r}}},fields:s==null?void 0:s.fields});return{data:(await e.request(a,u))[o]}},create:async({resource:t,variables:r,meta:s})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`create${i}`),a=(s==null?void 0:s.operation)??o,u=(s==null?void 0:s.nestedFieldsNames)||[],c=j(r,u),l=V(c),d=E(r,u),{query:p,variables:y}=g.mutation({operation:a,variables:{createInput:{value:{...d,...l},type:`${i}CreateInput!`}},fields:s==null?void 0:s.fields});return{data:(await e.request(p,y))[a][n]}},createMany:async({resource:t,variables:r,meta:s})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`create${i}`),a=(s==null?void 0:s.operation)??o;return{data:await Promise.all(r.map(async c=>{let{query:l,variables:d}=g.mutation({operation:a,variables:{createInput:{value:{data:c},type:`${i}CreateInput!`}},fields:["id"]});return(await e.request(l,d))[a][n]}))}},update:async({resource:t,id:r,variables:s,meta:n})=>{let i=v.default.singular(t),o=(0,q.default)(i,{pascalCase:!0}),a=(0,q.default)(`update${o}`),u=(n==null?void 0:n.operation)??a,c={},l=(n==null?void 0:n.nestedFieldsNames)||[],d=j(s,l),p=z(d,c),y=E(s,l),{query:b,variables:f}=g.mutation({operation:u,variables:{id:{value:Number(r),type:"Int!"},updateInput:{value:{...y,...p},type:`${o}UpdateInput!`}},fields:["id"]});return{data:(await e.request(b,f))[u][i]}},updateMany:async({resource:t,ids:r,variables:s,meta:n})=>{let i=v.default.singular(t),o=(0,q.default)(i,{pascalCase:!0}),a=(0,q.default)(`update${o}`),u=(n==null?void 0:n.operation)??a;return{data:await Promise.all(r.map(async l=>{let{query:d,variables:p}=g.mutation({operation:u,variables:{id:{value:Number(l),type:"Int!"},updateInput:{value:{...s},type:`${o}UpdateInput!`}},fields:["id"]});return(await e.request(d,p))[u][i]}))}},getOne:async({resource:t,id:r,meta:s})=>{let n=v.default.singular(t),o=(0,q.default)(n,{pascalCase:!0}),{query:a,variables:u}=g.query({operation:o,variables:{id:{value:Number(r),type:"Int!"}},fields:(s==null?void 0:s.fields)||["id"]});return{data:(await e.request(a,u))[o]}},deleteOne:async({resource:t,id:r,meta:s})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`delete${i}`),a=(s==null?void 0:s.operation)??o,{query:u,variables:c}=g.mutation({operation:a,variables:{id:{value:Number(r),type:"Int!"}},fields:["id"]});return{data:(await e.request(u,c))[a][n]}},deleteMany:async({resource:t,ids:r,meta:s})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`delete${i}`),a=(s==null?void 0:s.operation)??o;return{data:await Promise.all(r.map(async c=>{let{query:l,variables:d}=g.mutation({operation:a,variables:{id:{value:Number(c),type:"Int!"}},fields:["id"]});return(await e.request(l,d))[a][n]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:t,method:r,headers:s,meta:n})=>{let i=e;if(t&&(i=new O(t,{headers:s})),n)if(n.operation)if(r==="get"){let{query:o,variables:a}=g.query({operation:n.operation,fields:n.fields,variables:n.variables});return{data:(await i.request(o,a))[n.operation]}}else{let{query:o,variables:a}=g.mutation({operation:n.operation,fields:n.fields,variables:n.variables});return{data:(await i.request(o,a))[n.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),T=ce;var Ce=x(h("gql-query-builder")),be=T;})();
//# sourceMappingURL=index.js.map