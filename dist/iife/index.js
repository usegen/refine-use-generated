(()=>{var _=Object.create;var H=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,K=Object.prototype.hasOwnProperty;var h=(s=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(s,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):s)(function(s){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+s+'" is not supported')});var X=(s,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of J(t))!K.call(s,n)&&n!==e&&H(s,n,{get:()=>t[n],enumerable:!(r=G(t,n))||r.enumerable});return s};var x=(s,t,e)=>(e=s!=null?_(k(s)):{},X(t||!s||!s.__esModule?H(e,"default",{value:s,enumerable:!0}):e,s));var M=x(h("./createRequestBody.js"),1),$=h("./defaultJsonSerializer.js"),I=h("./helpers.js"),w=h("./parseArgs.js"),m=h("./resolveRequestDocument.js"),W=h("./types.js"),C=x(h("cross-fetch"),1),ae=h("./graphql-ws.js"),U=h("./resolveRequestDocument.js");var N=s=>{let t={};return s&&(typeof Headers<"u"&&s instanceof Headers||C&&C.Headers&&s instanceof C.Headers?t=(0,I.HeadersInstanceToPlainObject)(s):Array.isArray(s)?s.forEach(([e,r])=>{e&&r!==void 0&&(t[e]=r)}):t=s),t},S=s=>s.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),Y=s=>{if(!Array.isArray(s.query)){let r=s,n=[`query=${encodeURIComponent(S(r.query))}`];return s.variables&&n.push(`variables=${encodeURIComponent(r.jsonSerializer.stringify(r.variables))}`),r.operationName&&n.push(`operationName=${encodeURIComponent(r.operationName)}`),n.join("&")}if(typeof s.variables<"u"&&!Array.isArray(s.variables))throw new Error("Cannot create query with given variable type, array expected");let t=s,e=s.query.reduce((r,n,i)=>(r.push({query:S(n),variables:t.variables?t.jsonSerializer.stringify(t.variables[i]):void 0}),r),[]);return`query=${encodeURIComponent(t.jsonSerializer.stringify(e))}`},Z=s=>async t=>{let{url:e,query:r,variables:n,operationName:i,fetch:o,fetchOptions:a,middleware:u}=t,l={...t.headers},c="",d;s==="POST"?(d=(0,M.default)(r,n,i,a.jsonSerializer),typeof d=="string"&&(l["Content-Type"]="application/json")):c=Y({query:r,variables:n,operationName:i,jsonSerializer:a.jsonSerializer??$.defaultJsonSerializer});let p={method:s,headers:l,body:d,...a},f=e,b=p;if(u){let y=await Promise.resolve(u({...p,url:e,operationName:i,variables:n})),{url:R,...P}=y;f=R,b=P}return c&&(f=`${f}?${c}`),await o(f,b)},O=class{constructor(t,e={}){this.url=t,this.requestConfig=e,this.rawRequest=async(...r)=>{let[n,i,o]=r,a=(0,w.parseRawRequestArgs)(n,i,o),{headers:u,fetch:l=C.default,method:c="POST",requestMiddleware:d,responseMiddleware:p,...f}=this.requestConfig,{url:b}=this;a.signal!==void 0&&(f.signal=a.signal);let{operationName:y}=(0,m.resolveRequestDocument)(a.query);return B({url:b,query:a.query,variables:a.variables,headers:{...N(A(u)),...N(a.requestHeaders)},operationName:y,fetch:l,method:c,fetchOptions:f,middleware:d}).then(R=>(p&&p(R),R)).catch(R=>{throw p&&p(R),R})}}async request(t,...e){let[r,n]=e,i=(0,w.parseRequestArgs)(t,r,n),{headers:o,fetch:a=C.default,method:u="POST",requestMiddleware:l,responseMiddleware:c,...d}=this.requestConfig,{url:p}=this;i.signal!==void 0&&(d.signal=i.signal);let{query:f,operationName:b}=(0,m.resolveRequestDocument)(i.document);return B({url:p,query:f,variables:i.variables,headers:{...N(A(o)),...N(i.requestHeaders)},operationName:b,fetch:a,method:u,fetchOptions:d,middleware:l}).then(y=>(c&&c(y),y.data)).catch(y=>{throw c&&c(y),y})}batchRequests(t,e){let r=(0,w.parseBatchRequestArgs)(t,e),{headers:n,...i}=this.requestConfig;r.signal!==void 0&&(i.signal=r.signal);let o=r.documents.map(({document:u})=>(0,m.resolveRequestDocument)(u).query),a=r.documents.map(({variables:u})=>u);return B({url:this.url,query:o,variables:a,headers:{...N(A(n)),...N(r.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??C.default,method:this.requestConfig.method||"POST",fetchOptions:i,middleware:this.requestConfig.requestMiddleware}).then(u=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u.data)).catch(u=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u})}setHeaders(t){return this.requestConfig.headers=t,this}setHeader(t,e){let{headers:r}=this.requestConfig;return r?r[t]=e:this.requestConfig.headers={[t]:e},this}setEndpoint(t){return this.url=t,this}},B=async s=>{let{query:t,variables:e,fetchOptions:r}=s,n=Z((0,I.uppercase)(s.method??"post")),i=Array.isArray(s.query),o=await n(s),a=await ne(o,r.jsonSerializer??$.defaultJsonSerializer),u=Array.isArray(a)?!a.some(({data:c})=>!c):!!a.data,l=Array.isArray(a)||!a.errors||Array.isArray(a.errors)&&!a.errors.length||r.errorPolicy==="all"||r.errorPolicy==="ignore";if(o.ok&&l&&u){let{errors:c,...d}=(Array.isArray(a),a),p=r.errorPolicy==="ignore"?d:a;return{...i?{data:p}:p,headers:o.headers,status:o.status}}else{let c=typeof a=="string"?{error:a}:a;throw new W.ClientError({...c,status:o.status,headers:o.headers},{query:t,variables:e})}},ee=async(...s)=>{let[t,e,...r]=s,n=(0,w.parseRawRequestExtendedArgs)(t,e,...r);return new O(n.url).rawRequest({...n})};async function re(s,t,...e){let r=(0,w.parseRequestExtendedArgs)(s,t,...e);return new O(r.url).request({...r})}var se=async(...s)=>{let t=te(s);return new O(t.url).batchRequests(t)},te=s=>s.length===1?s[0]:{url:s[0],documents:s[1],requestHeaders:s[2],signal:void 0};var ne=async(s,t)=>{let e;return s.headers.forEach((r,n)=>{n.toLowerCase()==="content-type"&&(e=r)}),e&&(e.toLowerCase().startsWith("application/json")||e.toLowerCase().startsWith("application/graphql+json")||e.toLowerCase().startsWith("application/graphql-response+json"))?t.parse(await s.text()):s.text()},A=s=>typeof s=="function"?s():s,oe=(s,...t)=>s.reduce((e,r,n)=>`${e}${r}${n in t?t[n]:""}`,"");var g=x(h("gql-query-builder")),v=x(h("pluralize")),q=x(h("camelcase"));var ie=(s,t)=>s.map(e=>e==null?void 0:e.id).filter(e=>!!e).indexOf(t==null?void 0:t.id)!==-1,ue=(s,t)=>{if(console.log("currentData...",s),console.log("initialData...",t),Array.isArray(s)){let e=s.filter(i=>!(i!=null&&i.id)),r=s.filter(i=>!!(i!=null&&i.id)),n=t.filter(i=>!ie(s,i));return{create:e,update:r,delete:n}}return isNaN(Number(s))?{}:{connect:{id:Number(s)}}},z=(s,t={})=>Object.entries(s).reduce((e,[r,n])=>({...e,[r]:{...ue(n,{})}}),{}),j=(s,t)=>Object.entries(s).filter(([e,r])=>t.indexOf(e)!==-1).reduce((e,[r,n])=>({...e,[r]:n}),{}),E=(s,t)=>Object.entries(s).filter(([e,r])=>t.indexOf(e)===-1).reduce((e,[r,n])=>({...e,[r]:n}),{}),V=s=>Object.entries(s).reduce((t,[e,r])=>({...t,[e]:{create:r}}),{}),L=(s=[])=>s.map(e=>e!=null&&e.field&&(e!=null&&e.order)?{[e==null?void 0:e.field]:e==null?void 0:e.order}:null).filter(e=>!!e),Q=(s=[],t=[],e=[])=>(console.log("props from filters....",s),s.reduce((n,i)=>{if(i.operator!=="or"&&i.operator!=="and"&&"field"in i){let{field:o,operator:a,value:u}=i;if(console.log(a,u,"nestedFieldsNames",t),a==="in"&&e.indexOf(o)!==-1)return{...n,[o]:{some:{id:{in:u.map(l=>Number(l))}}}};if(a==="in"&&t.indexOf(o)!==-1)return{...n,[o]:{is:{id:{in:u.map(l=>Number(l))}}}};if(a==="eq"&&e.indexOf(o)!==-1)return{...n,[o]:{some:{id:{equals:Number(u)}}}};if(a==="eq"&&t.indexOf(o)!==-1)return{...n,[o]:{is:{id:{equals:Number(u)}}}};if(a==="eq"&&t.indexOf(o)===-1&&e.indexOf(o)!==-1)return{...n,[o]:{equals:u}};if(["lt","gt","lte","gte"].indexOf(a)!==-1)return{...n,[o]:{[a]:u}}}return{...n}},{}));var ce=s=>({getList:async t=>{let{resource:e,pagination:r,sorters:n,filters:i,meta:o}=t,a=v.default.singular(e),{current:u,pageSize:l,mode:c="server"}=r??{},d=L(n),p=Q(i,o==null?void 0:o.nestedFieldsNames,o==null?void 0:o.nestedListFieldsNames),f=(0,q.default)(a,{pascalCase:!0}),b=(0,v.default)(f),y=`all${b}`,R=`_all${b}Meta`,{query:P,variables:D}=g.query([{operation:y,variables:{where:{value:p,type:`${f}WhereInput`},orderBy:{value:d,type:`[${f}OrderByWithRelationInput!]`},page:{value:Number(u||1),required:!1,type:"Float"},perPage:{value:Number(l||10),required:!1,type:"Float"}},fields:(o==null?void 0:o.fields)||[]},{operation:R,variables:{where:{value:p,type:`${f}WhereInput`}},fields:["count"]}]),F=await s.request(P,D);return{data:F[y],total:Number(F[R].count)}},getMany:async({resource:t,ids:e,meta:r})=>{let n=v.default.singular(t),o=`all${(0,q.default)(n,{pascalCase:!0})}`,{query:a,variables:u}=g.query({operation:o,variables:{where:{value:{id_in:e}}},fields:r==null?void 0:r.fields});return{data:(await s.request(a,u))[o]}},create:async({resource:t,variables:e,meta:r})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`create${i}`),a=(r==null?void 0:r.operation)??o,u=(r==null?void 0:r.nestedFieldsNames)||[],l=j(e,u),c=V(l),d=E(e,u),{query:p,variables:f}=g.mutation({operation:a,variables:{createInput:{value:{...d,...c},type:`${i}CreateInput!`}},fields:r==null?void 0:r.fields});return{data:(await s.request(p,f))[a][n]}},createMany:async({resource:t,variables:e,meta:r})=>{let n=v.default.singular(t),i=(0,q.default)(`create${n}`),o=(r==null?void 0:r.operation)??i;return{data:await Promise.all(e.map(async u=>{let{query:l,variables:c}=g.mutation({operation:o,variables:{input:{value:{data:u},type:`${i}Input`}},fields:(r==null?void 0:r.fields)??[{operation:n,fields:["id"],variables:{}}]});return(await s.request(l,c))[o][n]}))}},update:async({resource:t,id:e,variables:r,meta:n})=>{let i=v.default.singular(t),o=(0,q.default)(i,{pascalCase:!0}),a=(0,q.default)(`update${o}`),u=(n==null?void 0:n.operation)??a,l={},c=(n==null?void 0:n.nestedFieldsNames)||[],d=j(r,c),p=z(d,l),f=E(r,c),{query:b,variables:y}=g.mutation({operation:u,variables:{id:{value:Number(e),type:"Int!"},updateInput:{value:{...f,...p},type:`${o}UpdateInput!`}},fields:["id"]});return{data:(await s.request(b,y))[u][i]}},updateMany:async({resource:t,ids:e,variables:r,meta:n})=>{let i=v.default.singular(t),o=(0,q.default)(i,{pascalCase:!0}),a=(0,q.default)(`update${o}`),u=(n==null?void 0:n.operation)??a;return{data:await Promise.all(e.map(async c=>{let{query:d,variables:p}=g.mutation({operation:u,variables:{id:{value:Number(c),type:"Int!"},updateInput:{value:{...r},type:`${o}UpdateInput!`}},fields:["id"]});return(await s.request(d,p))[u][i]}))}},getOne:async({resource:t,id:e,meta:r})=>{let n=v.default.singular(t),o=(0,q.default)(n,{pascalCase:!0}),{query:a,variables:u}=g.query({operation:o,variables:{id:{value:Number(e),type:"Int!"}},fields:(r==null?void 0:r.fields)||["id"]});return{data:(await s.request(a,u))[o]}},deleteOne:async({resource:t,id:e,meta:r})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`delete${i}`),a=(r==null?void 0:r.operation)??o,{query:u,variables:l}=g.mutation({operation:a,variables:{id:{value:Number(e),type:"Int!"}},fields:["id"]});return{data:(await s.request(u,l))[a][n]}},deleteMany:async({resource:t,ids:e,meta:r})=>{let n=v.default.singular(t),i=(0,q.default)(n,{pascalCase:!0}),o=(0,q.default)(`delete${i}`),a=(r==null?void 0:r.operation)??o;return{data:await Promise.all(e.map(async l=>{let{query:c,variables:d}=g.mutation({operation:a,variables:{id:{value:Number(l),type:"Int!"}},fields:["id"]});return(await s.request(c,d))[a][n]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:t,method:e,headers:r,meta:n})=>{let i=s;if(t&&(i=new O(t,{headers:r})),n)if(n.operation)if(e==="get"){let{query:o,variables:a}=g.query({operation:n.operation,fields:n.fields,variables:n.variables});return{data:(await i.request(o,a))[n.operation]}}else{let{query:o,variables:a}=g.mutation({operation:n.operation,fields:n.fields,variables:n.variables});return{data:(await i.request(o,a))[n.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),T=ce;var we=x(h("gql-query-builder")),ge=T;})();
//# sourceMappingURL=index.js.map