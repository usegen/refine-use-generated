import{GraphQLClient as E}from"graphql-request";import*as c from"gql-query-builder";import g from"pluralize";import p from"camelcase";var F=(n,o)=>n.map(e=>e==null?void 0:e.id).filter(e=>!!e).indexOf(o==null?void 0:o.id)!==-1,j=n=>{let{id:o,...e}=n;return{data:{...e},where:{id:Number(o)}}},V=(n,o)=>{if(console.log("currentData...",n),console.log("initialData...",o),Array.isArray(n)){let e=n.filter(a=>!(a!=null&&a.id)),s=n.filter(a=>!!(a!=null&&a.id)).map(j),r=(o||[]).filter(a=>!F(n,a));return{create:e,update:s,delete:r}}return console.log("currentData .....",n),Object.keys(n).length===1&&(n!=null&&n.id)?{connect:{id:Number(n==null?void 0:n.id)}}:{}},N=(n,o={})=>Object.entries(n).reduce((e,[s,r])=>({...e,[s]:{...V(r,null)}}),{}),h=(n,o)=>Object.entries(n).filter(([e,s])=>o.indexOf(e)!==-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),x=(n,o)=>Object.entries(n).filter(([e,s])=>o.indexOf(e)===-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),O=n=>Object.entries(n).reduce((o,[e,s])=>({...o,[e]:{create:s}}),{}),I=(n=[])=>n.map(e=>e!=null&&e.field&&(e!=null&&e.order)?{[e==null?void 0:e.field]:e==null?void 0:e.order}:null).filter(e=>!!e),B=(n=[],o=[],e=[])=>(console.log("props from filters....",n),n.reduce((r,a)=>{if(a.operator!=="or"&&a.operator!=="and"&&"field"in a){let{field:t,operator:u,value:i}=a;if(console.log(u,i,"nestedFieldsNames",o),u==="in"&&e.indexOf(t)!==-1)return{...r,[t]:{some:{id:{in:i.map(l=>Number(l))}}}};if(u==="in"&&o.indexOf(t)!==-1)return{...r,[t]:{is:{id:{in:i.map(l=>Number(l))}}}};if(u==="eq"&&e.indexOf(t)!==-1)return{...r,[t]:{some:{id:{equals:Number(i)}}}};if(u==="eq"&&o.indexOf(t)!==-1)return{...r,[t]:{is:{id:{equals:Number(i)}}}};if(u==="eq"&&o.indexOf(t)===-1&&e.indexOf(t)!==-1)return{...r,[t]:{equals:i}};if(["lt","gt","lte","gte"].indexOf(u)!==-1)return{...r,[t]:{[u]:i}}}return{...r}},{}));var U=n=>({getList:async o=>{let{resource:e,pagination:s,sorters:r,filters:a,meta:t}=o,u=g.singular(e),{current:i,pageSize:l,mode:d="server"}=s??{},y=I(r),q=(t==null?void 0:t.where)||B(a,t==null?void 0:t.nestedFieldsNames,t==null?void 0:t.nestedListFieldsNames),b=p(u,{pascalCase:!0}),f=g(b),R=`all${f}`,v=`_all${f}Meta`,{query:P,variables:$}=c.query([{operation:R,variables:{where:{value:q,type:`${b}WhereInput`},orderBy:{value:y,type:`[${b}OrderByWithRelationInput!]`},page:{value:Number(i||1),required:!1,type:"Float"},perPage:{value:Number(l||10),required:!1,type:"Float"}},fields:(t==null?void 0:t.fields)||[]},{operation:v,variables:{where:{value:q,type:`${b}WhereInput`}},fields:["count"]}]),w=await n.request(P,$);return{data:w[R],total:Number(w[v].count)}},getMany:async({resource:o,ids:e,meta:s})=>{let r=g.singular(o),t=`all${p(r,{pascalCase:!0})}`,{query:u,variables:i}=c.query({operation:t,variables:{where:{value:{id_in:e}}},fields:s==null?void 0:s.fields});return{data:(await n.request(u,i))[t]}},create:async({resource:o,variables:e,meta:s})=>{let r=g.singular(o),a=p(r,{pascalCase:!0}),t=p(`create${a}`),u=(s==null?void 0:s.operation)??t,i=(s==null?void 0:s.nestedFieldsNames)||[],l=h(e,i),d=O(l),y=x(e,i),{query:q,variables:b}=c.mutation({operation:u,variables:{createInput:{value:{...y,...d},type:`${a}CreateInput!`}},fields:s==null?void 0:s.fields});return{data:(await n.request(q,b))[u][r]}},createMany:async({resource:o,variables:e,meta:s})=>{let r=g.singular(o),a=p(r,{pascalCase:!0}),t=p(`create${a}`),u=(s==null?void 0:s.operation)??t;return{data:await Promise.all(e.map(async l=>{let{query:d,variables:y}=c.mutation({operation:u,variables:{createInput:{value:{data:l},type:`${a}CreateInput`}},fields:["id"]});return(await n.request(d,y))[u][r]}))}},update:async({resource:o,id:e,variables:s,meta:r})=>{let a=g.singular(o),t=p(a,{pascalCase:!0}),u=p(`update${t}`),i=(r==null?void 0:r.operation)??u,l={},d=(r==null?void 0:r.nestedFieldsNames)||[],y=h(s,d),q=N(y,l),b=x(s,d),{query:f,variables:R}=c.mutation({operation:i,variables:{id:{value:Number(e),type:"Int!"},updateInput:{value:{...b,...q},type:`${t}UpdateInput!`}},fields:["id"]});return{data:(await n.request(f,R))[i][a]}},updateMany:async({resource:o,ids:e,variables:s,meta:r})=>{let a=g.singular(o),t=p(a,{pascalCase:!0}),u=p(`update${t}`),i=(r==null?void 0:r.operation)??u;return{data:await Promise.all(e.map(async d=>{let{query:y,variables:q}=c.mutation({operation:i,variables:{id:{value:Number(d),type:"Int!"},updateInput:{value:{...s},type:`${t}UpdateInput!`}},fields:["id"]});return(await n.request(y,q))[i][a]}))}},getOne:async({resource:o,id:e,meta:s})=>{let r=g.singular(o),t=p(r,{pascalCase:!0}),{query:u,variables:i}=c.query({operation:t,variables:{id:{value:Number(e),type:"Int!"}},fields:(s==null?void 0:s.fields)||["id"]});return{data:(await n.request(u,i))[t]}},deleteOne:async({resource:o,id:e,meta:s})=>{let r=g.singular(o),a=p(r,{pascalCase:!0}),t=p(`delete${a}`),u=(s==null?void 0:s.operation)??t,{query:i,variables:l}=c.mutation({operation:u,variables:{id:{value:Number(e),type:"Int!"}},fields:["id"]});return{data:(await n.request(i,l))[u][r]}},deleteMany:async({resource:o,ids:e,meta:s})=>{let r=g.singular(o),a=p(r,{pascalCase:!0}),t=p(`delete${a}`),u=(s==null?void 0:s.operation)??t;return{data:await Promise.all(e.map(async l=>{let{query:d,variables:y}=c.mutation({operation:u,variables:{id:{value:Number(l),type:"Int!"}},fields:["id"]});return(await n.request(d,y))[u][r]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:o,method:e,headers:s,meta:r})=>{let a=n;if(o&&(a=new E(o,{headers:s})),r)if(r.operation)if(e==="get"){let{query:t,variables:u}=c.query({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(t,u))[r.operation]}}else{let{query:t,variables:u}=c.mutation({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(t,u))[r.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),C=U;import{GraphQLClient as m,batchRequests as T,gql as H,rawRequest as K,request as X,resolveRequestDocument as Y}from"graphql-request";import*as Z from"gql-query-builder";var A=C;export{m as GraphQLClient,T as batchRequests,V as createDeleteUpdateFields,O as createNestedInput,A as default,x as excludePropsFomObj,I as generateSort,B as generateWherePropFromFilters,H as gql,h as includeJustPropsFromObj,Z as qqlQueryBuilder,K as rawRequest,X as request,Y as resolveRequestDocument,N as updateNestedInput};
//# sourceMappingURL=index.js.map