import{GraphQLClient as j}from"graphql-request";import*as c from"gql-query-builder";import q from"pluralize";import p from"camelcase";var F=(a,o)=>a.map(e=>e==null?void 0:e.id).filter(e=>!!e).indexOf(o==null?void 0:o.id)!==-1,V=(a,o)=>{if(console.log("currentData...",a),console.log("initialData...",o),Array.isArray(a)){let e=a.filter(n=>!(n!=null&&n.id)),s=a.filter(n=>!!(n!=null&&n.id)),r=o.filter(n=>!F(a,n));return{create:e,update:s,delete:r}}return isNaN(Number(a))?{}:{connect:{id:Number(a)}}},w=(a,o={})=>Object.entries(a).reduce((e,[s,r])=>({...e,[s]:{...V(r,{})}}),{}),N=(a,o)=>Object.entries(a).filter(([e,s])=>o.indexOf(e)!==-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),x=(a,o)=>Object.entries(a).filter(([e,s])=>o.indexOf(e)===-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),O=a=>Object.entries(a).reduce((o,[e,s])=>({...o,[e]:{create:s}}),{}),I=(a=[])=>a.map(e=>e!=null&&e.field&&(e!=null&&e.order)?{[e==null?void 0:e.field]:e==null?void 0:e.order}:null).filter(e=>!!e),B=(a=[],o=[],e=[])=>(console.log("props from filters....",a),a.reduce((r,n)=>{if(n.operator!=="or"&&n.operator!=="and"&&"field"in n){let{field:t,operator:u,value:i}=n;if(console.log(u,i,"nestedFieldsNames",o),u==="in"&&e.indexOf(t)!==-1)return{...r,[t]:{some:{id:{in:i.map(l=>Number(l))}}}};if(u==="in"&&o.indexOf(t)!==-1)return{...r,[t]:{is:{id:{in:i.map(l=>Number(l))}}}};if(u==="eq"&&e.indexOf(t)!==-1)return{...r,[t]:{some:{id:{equals:Number(i)}}}};if(u==="eq"&&o.indexOf(t)!==-1)return{...r,[t]:{is:{id:{equals:Number(i)}}}};if(u==="eq"&&o.indexOf(t)===-1&&e.indexOf(t)!==-1)return{...r,[t]:{equals:i}};if(["lt","gt","lte","gte"].indexOf(u)!==-1)return{...r,[t]:{[u]:i}}}return{...r}},{}));var E=a=>({getList:async o=>{let{resource:e,pagination:s,sorters:r,filters:n,meta:t}=o,u=q.singular(e),{current:i,pageSize:l,mode:d="server"}=s??{},y=I(r),g=B(n,t==null?void 0:t.nestedFieldsNames,t==null?void 0:t.nestedListFieldsNames),b=p(u,{pascalCase:!0}),f=q(b),R=`all${f}`,v=`_all${f}Meta`,{query:P,variables:$}=c.query([{operation:R,variables:{where:{value:g,type:`${b}WhereInput`},orderBy:{value:y,type:`[${b}OrderByWithRelationInput!]`},page:{value:Number(i||1),required:!1,type:"Float"},perPage:{value:Number(l||10),required:!1,type:"Float"}},fields:(t==null?void 0:t.fields)||[]},{operation:v,variables:{where:{value:g,type:`${b}WhereInput`}},fields:["count"]}]),h=await a.request(P,$);return{data:h[R],total:Number(h[v].count)}},getMany:async({resource:o,ids:e,meta:s})=>{let r=q.singular(o),t=`all${p(r,{pascalCase:!0})}`,{query:u,variables:i}=c.query({operation:t,variables:{where:{value:{id_in:e}}},fields:s==null?void 0:s.fields});return{data:(await a.request(u,i))[t]}},create:async({resource:o,variables:e,meta:s})=>{let r=q.singular(o),n=p(r,{pascalCase:!0}),t=p(`create${n}`),u=(s==null?void 0:s.operation)??t,i=(s==null?void 0:s.nestedFieldsNames)||[],l=N(e,i),d=O(l),y=x(e,i),{query:g,variables:b}=c.mutation({operation:u,variables:{createInput:{value:{...y,...d},type:`${n}CreateInput!`}},fields:s==null?void 0:s.fields});return{data:(await a.request(g,b))[u][r]}},createMany:async({resource:o,variables:e,meta:s})=>{let r=q.singular(o),n=p(`create${r}`),t=(s==null?void 0:s.operation)??n;return{data:await Promise.all(e.map(async i=>{let{query:l,variables:d}=c.mutation({operation:t,variables:{input:{value:{data:i},type:`${n}Input`}},fields:(s==null?void 0:s.fields)??[{operation:r,fields:["id"],variables:{}}]});return(await a.request(l,d))[t][r]}))}},update:async({resource:o,id:e,variables:s,meta:r})=>{let n=q.singular(o),t=p(n,{pascalCase:!0}),u=p(`update${t}`),i=(r==null?void 0:r.operation)??u,l={},d=(r==null?void 0:r.nestedFieldsNames)||[],y=N(s,d),g=w(y,l),b=x(s,d),{query:f,variables:R}=c.mutation({operation:i,variables:{id:{value:Number(e),type:"Int!"},updateInput:{value:{...b,...g},type:`${t}UpdateInput!`}},fields:["id"]});return{data:(await a.request(f,R))[i][n]}},updateMany:async({resource:o,ids:e,variables:s,meta:r})=>{let n=q.singular(o),t=p(n,{pascalCase:!0}),u=p(`update${t}`),i=(r==null?void 0:r.operation)??u;return{data:await Promise.all(e.map(async d=>{let{query:y,variables:g}=c.mutation({operation:i,variables:{id:{value:Number(d),type:"Int!"},updateInput:{value:{...s},type:`${t}UpdateInput!`}},fields:["id"]});return(await a.request(y,g))[i][n]}))}},getOne:async({resource:o,id:e,meta:s})=>{let r=q.singular(o),t=p(r,{pascalCase:!0}),{query:u,variables:i}=c.query({operation:t,variables:{id:{value:Number(e),type:"Int!"}},fields:(s==null?void 0:s.fields)||["id"]});return{data:(await a.request(u,i))[t]}},deleteOne:async({resource:o,id:e,meta:s})=>{let r=q.singular(o),n=p(r,{pascalCase:!0}),t=p(`delete${n}`),u=(s==null?void 0:s.operation)??t,{query:i,variables:l}=c.mutation({operation:u,variables:{id:{value:Number(e),type:"Int!"}},fields:["id"]});return{data:(await a.request(i,l))[u][r]}},deleteMany:async({resource:o,ids:e,meta:s})=>{let r=q.singular(o),n=p(r,{pascalCase:!0}),t=p(`delete${n}`),u=(s==null?void 0:s.operation)??t;return{data:await Promise.all(e.map(async l=>{let{query:d,variables:y}=c.mutation({operation:u,variables:{id:{value:Number(l),type:"Int!"}},fields:["id"]});return(await a.request(d,y))[u][r]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:o,method:e,headers:s,meta:r})=>{let n=a;if(o&&(n=new j(o,{headers:s})),r)if(r.operation)if(e==="get"){let{query:t,variables:u}=c.query({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await n.request(t,u))[r.operation]}}else{let{query:t,variables:u}=c.mutation({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await n.request(t,u))[r.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),C=E;import{GraphQLClient as J,batchRequests as T,gql as k,rawRequest as H,request as K,resolveRequestDocument as X}from"graphql-request";import*as Y from"gql-query-builder";var S=C;export{J as GraphQLClient,T as batchRequests,V as createDeleteUpdateFields,O as createNestedInput,S as default,x as excludePropsFomObj,I as generateSort,B as generateWherePropFromFilters,k as gql,N as includeJustPropsFromObj,Y as qqlQueryBuilder,H as rawRequest,K as request,X as resolveRequestDocument,w as updateNestedInput};
//# sourceMappingURL=index.js.map