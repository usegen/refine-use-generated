var U=Object.create;var h=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var S=(n,t)=>{for(var e in t)h(n,e,{get:t[e],enumerable:!0})},F=(n,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of G(t))!M.call(n,r)&&r!==e&&h(n,r,{get:()=>t[r],enumerable:!(s=Q(t,r))||s.enumerable});return n};var w=(n,t,e)=>(e=n!=null?U(L(n)):{},F(t||!n||!n.__esModule?h(e,"default",{value:n,enumerable:!0}):e,n)),_=n=>F(h({},"__esModule",{value:!0}),n);var T={};S(T,{GraphQLClient:()=>y.GraphQLClient,batchRequests:()=>y.batchRequests,createDeleteUpdateFields:()=>j,createNestedInput:()=>C,default:()=>A,excludePropsFomObj:()=>N,generateSort:()=>P,generateWherePropFromFilters:()=>$,gql:()=>y.gql,includeJustPropsFromObj:()=>O,qqlQueryBuilder:()=>k,rawRequest:()=>y.rawRequest,request:()=>y.request,resolveRequestDocument:()=>y.resolveRequestDocument,updateNestedInput:()=>B});module.exports=_(T);var V=require("graphql-request"),c=w(require("gql-query-builder")),q=w(require("pluralize")),p=w(require("camelcase"));var z=(n,t)=>n.map(e=>e==null?void 0:e.id).filter(e=>!!e).indexOf(t==null?void 0:t.id)!==-1,j=(n,t)=>{let e=n.filter(a=>!(a!=null&&a.id)),s=n.filter(a=>!!(a!=null&&a.id)),r=t.filter(a=>!z(n,a));return{create:e,update:s,delete:r}},B=(n,t)=>Object.entries(n).reduce((e,[s,r])=>({...e,[s]:{...j(r,t[s])}}),{}),O=(n,t)=>Object.entries(n).filter(([e,s])=>t.indexOf(e)!==-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),N=(n,t)=>Object.entries(n).filter(([e,s])=>t.indexOf(e)===-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),C=n=>Object.entries(n).reduce((t,[e,s])=>({...t,[e]:{create:s}}),{}),P=(n=[])=>n.map(e=>e!=null&&e.field&&(e!=null&&e.order)?{[e==null?void 0:e.field]:e==null?void 0:e.order}:null).filter(e=>!!e),$=(n=[],t=[],e=[])=>(console.log("props from filters....",n),n.reduce((r,a)=>{if(a.operator!=="or"&&a.operator!=="and"&&"field"in a){let{field:o,operator:u,value:i}=a;if(console.log(u,i,"nestedFieldsNames",t),u==="in"&&e.indexOf(o)!==-1)return{...r,[o]:{some:{id:{in:i.map(l=>Number(l))}}}};if(u==="in"&&t.indexOf(o)!==-1)return{...r,[o]:{is:{id:{in:i.map(l=>Number(l))}}}};if(u==="eq"&&e.indexOf(o)!==-1)return{...r,[o]:{some:{id:{equals:Number(i)}}}};if(u==="eq"&&t.indexOf(o)!==-1)return{...r,[o]:{is:{id:{equals:Number(i)}}}};if(u==="eq"&&t.indexOf(o)===-1&&e.indexOf(o)!==-1)return{...r,[o]:{equals:i}};if(["lt","gt","lte","gte"].indexOf(u)!==-1)return{...r,[o]:{[u]:i}}}return{...r}},{}));var J=n=>({getList:async t=>{let{resource:e,pagination:s,sorters:r,filters:a,meta:o}=t,u=q.default.singular(e),{current:i,pageSize:l,mode:d="server"}=s??{},g=P(r),b=$(a,o==null?void 0:o.nestedFieldsNames,o==null?void 0:o.nestedListFieldsNames),f=(0,p.default)(u,{pascalCase:!0});console.log("props ?????;;;;;",t);let R=(0,q.default)(f),v=`all${R}`,x=`_all${R}Meta`,{query:W,variables:D}=c.query([{operation:v,variables:{where:{value:b,type:`${f}WhereInput`},orderBy:{value:g,type:`[${f}OrderByWithRelationInput!]`},page:{value:Number(i||1),required:!1,type:"Float"},perPage:{value:Number(l||10),required:!1,type:"Float"}},fields:(o==null?void 0:o.fields)||[]},{operation:x,variables:{where:{value:b,type:`${f}WhereInput`}},fields:["count"]}]),I=await n.request(W,D);return console.log("response[operation2].count",I[x].count),{data:I[v],total:Number(I[x].count)}},getMany:async({resource:t,ids:e,meta:s})=>{let r=q.default.singular(t),o=`all${(0,p.default)(r,{pascalCase:!0})}`,{query:u,variables:i}=c.query({operation:o,variables:{where:{value:{id_in:e}}},fields:s==null?void 0:s.fields});return{data:(await n.request(u,i))[o]}},create:async({resource:t,variables:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),o=(0,p.default)(`create${a}`),u=(s==null?void 0:s.operation)??o,i=(s==null?void 0:s.nestedFieldsNames)||[],l=O(e,i),d=C(l),g=N(e,i),{query:b,variables:f}=c.mutation({operation:u,variables:{createInput:{value:{...g,...d},type:`${a}CreateInput!`}},fields:s==null?void 0:s.fields});return{data:(await n.request(b,f))[u][r]}},createMany:async({resource:t,variables:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(`create${r}`),o=(s==null?void 0:s.operation)??a;return{data:await Promise.all(e.map(async i=>{let{query:l,variables:d}=c.mutation({operation:o,variables:{input:{value:{data:i},type:`${a}Input`}},fields:(s==null?void 0:s.fields)??[{operation:r,fields:["id"],variables:{}}]});return(await n.request(l,d))[o][r]}))}},update:async({resource:t,id:e,variables:s,meta:r})=>{let a=q.default.singular(t),o=(0,p.default)(a,{pascalCase:!0}),u=(0,p.default)(`update${o}`),i=(r==null?void 0:r.operation)??u,l={},d=(r==null?void 0:r.nestedFieldsNames)||[],g=O(s,d),b=B(g,l),f=N(s,d),{query:R,variables:v}=c.mutation({operation:i,variables:{id:{value:Number(e),type:"Int!"},updateInput:{value:{...f,...b},type:`${o}UpdateInput!`}},fields:["id"]});return{data:(await n.request(R,v))[i][a]}},updateMany:async({resource:t,ids:e,variables:s,meta:r})=>{let a=q.default.singular(t),o=(0,p.default)(a,{pascalCase:!0}),u=(0,p.default)(`update${o}`),i=(r==null?void 0:r.operation)??u;return{data:await Promise.all(e.map(async d=>{let{query:g,variables:b}=c.mutation({operation:i,variables:{id:{value:Number(d),type:"Int!"},updateInput:{value:{...s},type:`${o}UpdateInput!`}},fields:["id"]});return(await n.request(g,b))[i][a]}))}},getOne:async({resource:t,id:e,meta:s})=>{let r=q.default.singular(t),o=(0,p.default)(r,{pascalCase:!0}),{query:u,variables:i}=c.query({operation:o,variables:{id:{value:Number(e),type:"Int!"}},fields:(s==null?void 0:s.fields)||["id"]});return{data:(await n.request(u,i))[o]}},deleteOne:async({resource:t,id:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),o=(0,p.default)(`delete${a}`),u=(s==null?void 0:s.operation)??o,{query:i,variables:l}=c.mutation({operation:u,variables:{id:{value:Number(e),type:"Int!"}},fields:["id"]});return{data:(await n.request(i,l))[u][r]}},deleteMany:async({resource:t,ids:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),o=(0,p.default)(`delete${a}`),u=(s==null?void 0:s.operation)??o;return{data:await Promise.all(e.map(async l=>{let{query:d,variables:g}=c.mutation({operation:u,variables:{id:{value:Number(l),type:"Int!"}},fields:["id"]});return(await n.request(d,g))[u][r]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:t,method:e,headers:s,meta:r})=>{let a=n;if(t&&(a=new V.GraphQLClient(t,{headers:s})),r)if(r.operation)if(e==="get"){let{query:o,variables:u}=c.query({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(o,u))[r.operation]}}else{let{query:o,variables:u}=c.mutation({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(o,u))[r.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),E=J;var y=require("graphql-request"),k=w(require("gql-query-builder")),A=E;
//# sourceMappingURL=index.js.map