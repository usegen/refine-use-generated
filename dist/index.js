var Q=Object.create;var h=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var _=(o,t)=>{for(var e in t)h(o,e,{get:t[e],enumerable:!0})},F=(o,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of L(t))!S.call(o,r)&&r!==e&&h(o,r,{get:()=>t[r],enumerable:!(s=G(t,r))||s.enumerable});return o};var x=(o,t,e)=>(e=o!=null?Q(M(o)):{},F(t||!o||!o.__esModule?h(e,"default",{value:o,enumerable:!0}):e,o)),A=o=>F(h({},"__esModule",{value:!0}),o);var H={};_(H,{GraphQLClient:()=>y.GraphQLClient,batchRequests:()=>y.batchRequests,createDeleteUpdateFields:()=>j,createNestedInput:()=>B,default:()=>T,excludePropsFomObj:()=>N,generateSort:()=>C,generateWherePropFromFilters:()=>P,gql:()=>y.gql,includeJustPropsFromObj:()=>w,qqlQueryBuilder:()=>K,rawRequest:()=>y.rawRequest,request:()=>y.request,resolveRequestDocument:()=>y.resolveRequestDocument,updateNestedInput:()=>I});module.exports=A(H);var V=require("graphql-request"),c=x(require("gql-query-builder")),q=x(require("pluralize")),p=x(require("camelcase"));var z=(o,t)=>o.map(e=>e==null?void 0:e.id).filter(e=>!!e).indexOf(t==null?void 0:t.id)!==-1,J=o=>{let{id:t,...e}=o;return{data:{...e},where:{id:Number(t)}}},j=(o,t)=>{if(console.log("currentData...",o),console.log("initialData...",t),Array.isArray(o)){let e=o.filter(a=>!(a!=null&&a.id)),s=o.filter(a=>!!(a!=null&&a.id)).map(J),r=(t||[]).filter(a=>!z(o,a));return{create:e,update:s,delete:r}}return console.log("currentData .....",o),Object.keys(o).length===1&&(o!=null&&o.id)?{connect:{id:Number(o==null?void 0:o.id)}}:{}},I=(o,t={})=>Object.entries(o).reduce((e,[s,r])=>({...e,[s]:{...j(r,null)}}),{}),w=(o,t)=>Object.entries(o).filter(([e,s])=>t.indexOf(e)!==-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),N=(o,t)=>Object.entries(o).filter(([e,s])=>t.indexOf(e)===-1).reduce((e,[s,r])=>({...e,[s]:r}),{}),B=o=>Object.entries(o).reduce((t,[e,s])=>({...t,[e]:{create:s}}),{}),C=(o=[])=>o.map(e=>e!=null&&e.field&&(e!=null&&e.order)?{[e==null?void 0:e.field]:e==null?void 0:e.order}:null).filter(e=>!!e),P=(o=[],t=[],e=[])=>(console.log("props from filters....",o),o.reduce((r,a)=>{if(a.operator!=="or"&&a.operator!=="and"&&"field"in a){let{field:n,operator:u,value:i}=a;if(console.log(u,i,"nestedFieldsNames",t),u==="in"&&e.indexOf(n)!==-1)return{...r,[n]:{some:{id:{in:i.map(l=>Number(l))}}}};if(u==="in"&&t.indexOf(n)!==-1)return{...r,[n]:{is:{id:{in:i.map(l=>Number(l))}}}};if(u==="eq"&&e.indexOf(n)!==-1)return{...r,[n]:{some:{id:{equals:Number(i)}}}};if(u==="eq"&&t.indexOf(n)!==-1)return{...r,[n]:{is:{id:{equals:Number(i)}}}};if(u==="eq"&&t.indexOf(n)===-1&&e.indexOf(n)!==-1)return{...r,[n]:{equals:i}};if(["lt","gt","lte","gte"].indexOf(u)!==-1)return{...r,[n]:{[u]:i}}}return{...r}},{}));var k=o=>({getList:async t=>{let{resource:e,pagination:s,sorters:r,filters:a,meta:n}=t,u=q.default.singular(e),{current:i,pageSize:l,mode:d="server"}=s??{},g=C(r),b=(n==null?void 0:n.where)||P(a,n==null?void 0:n.nestedFieldsNames,n==null?void 0:n.nestedListFieldsNames),f=(0,p.default)(u,{pascalCase:!0}),R=(0,q.default)(f),v=`all${R}`,O=`_all${R}Meta`,{query:U,variables:W}=c.query([{operation:v,variables:{where:{value:b,type:`${f}WhereInput`},orderBy:{value:g,type:`[${f}OrderByWithRelationInput!]`},page:{value:Number(i||1),required:!1,type:"Float"},perPage:{value:Number(l||10),required:!1,type:"Float"}},fields:(n==null?void 0:n.fields)||[]},{operation:O,variables:{where:{value:b,type:`${f}WhereInput`}},fields:["count"]}]),$=await o.request(U,W);return{data:$[v],total:Number($[O].count)}},getMany:async({resource:t,ids:e,meta:s})=>{let r=q.default.singular(t),n=`all${(0,p.default)(r,{pascalCase:!0})}`,{query:u,variables:i}=c.query({operation:n,variables:{where:{value:{id_in:e}}},fields:s==null?void 0:s.fields});return{data:(await o.request(u,i))[n]}},create:async({resource:t,variables:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),n=(0,p.default)(`create${a}`),u=(s==null?void 0:s.operation)??n,i=(s==null?void 0:s.nestedFieldsNames)||[],l=w(e,i),d=B(l),g=N(e,i),{query:b,variables:f}=c.mutation({operation:u,variables:{createInput:{value:{...g,...d},type:`${a}CreateInput!`}},fields:s==null?void 0:s.fields});return{data:(await o.request(b,f))[u][r]}},createMany:async({resource:t,variables:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(`create${r}`),n=(s==null?void 0:s.operation)??a;return{data:await Promise.all(e.map(async i=>{let{query:l,variables:d}=c.mutation({operation:n,variables:{input:{value:{data:i},type:`${a}Input`}},fields:(s==null?void 0:s.fields)??[{operation:r,fields:["id"],variables:{}}]});return(await o.request(l,d))[n][r]}))}},update:async({resource:t,id:e,variables:s,meta:r})=>{let a=q.default.singular(t),n=(0,p.default)(a,{pascalCase:!0}),u=(0,p.default)(`update${n}`),i=(r==null?void 0:r.operation)??u,l={},d=(r==null?void 0:r.nestedFieldsNames)||[],g=w(s,d),b=I(g,l),f=N(s,d),{query:R,variables:v}=c.mutation({operation:i,variables:{id:{value:Number(e),type:"Int!"},updateInput:{value:{...f,...b},type:`${n}UpdateInput!`}},fields:["id"]});return{data:(await o.request(R,v))[i][a]}},updateMany:async({resource:t,ids:e,variables:s,meta:r})=>{let a=q.default.singular(t),n=(0,p.default)(a,{pascalCase:!0}),u=(0,p.default)(`update${n}`),i=(r==null?void 0:r.operation)??u;return{data:await Promise.all(e.map(async d=>{let{query:g,variables:b}=c.mutation({operation:i,variables:{id:{value:Number(d),type:"Int!"},updateInput:{value:{...s},type:`${n}UpdateInput!`}},fields:["id"]});return(await o.request(g,b))[i][a]}))}},getOne:async({resource:t,id:e,meta:s})=>{let r=q.default.singular(t),n=(0,p.default)(r,{pascalCase:!0}),{query:u,variables:i}=c.query({operation:n,variables:{id:{value:Number(e),type:"Int!"}},fields:(s==null?void 0:s.fields)||["id"]});return{data:(await o.request(u,i))[n]}},deleteOne:async({resource:t,id:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),n=(0,p.default)(`delete${a}`),u=(s==null?void 0:s.operation)??n,{query:i,variables:l}=c.mutation({operation:u,variables:{id:{value:Number(e),type:"Int!"}},fields:["id"]});return{data:(await o.request(i,l))[u][r]}},deleteMany:async({resource:t,ids:e,meta:s})=>{let r=q.default.singular(t),a=(0,p.default)(r,{pascalCase:!0}),n=(0,p.default)(`delete${a}`),u=(s==null?void 0:s.operation)??n;return{data:await Promise.all(e.map(async l=>{let{query:d,variables:g}=c.mutation({operation:u,variables:{id:{value:Number(l),type:"Int!"}},fields:["id"]});return(await o.request(d,g))[u][r]}))}},getApiUrl:()=>{throw Error("Not implemented on refine-graphql data provider.")},custom:async({url:t,method:e,headers:s,meta:r})=>{let a=o;if(t&&(a=new V.GraphQLClient(t,{headers:s})),r)if(r.operation)if(e==="get"){let{query:n,variables:u}=c.query({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(n,u))[r.operation]}}else{let{query:n,variables:u}=c.mutation({operation:r.operation,fields:r.fields,variables:r.variables});return{data:(await a.request(n,u))[r.operation]}}else throw Error("GraphQL operation name required.");else throw Error("GraphQL need to operation, fields and variables values in meta object.")}}),E=k;var y=require("graphql-request"),K=x(require("gql-query-builder")),T=E;
//# sourceMappingURL=index.js.map